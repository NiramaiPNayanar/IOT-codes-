#include <WiFi.h>
#include <PubSubClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>

const char* ssid        = "Yokoso";
const char* password    = "why are you gay?";
const char* mqtt_server = "192.168.90.20"; 
const int   mqtt_port   = 1883;
const char* topic_pub   = "esp32/hive";

#define OBJ_PIN         15
#define ONE_WIRE_BUS     5

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

WiFiClient espClient;
PubSubClient client(espClient);

volatile unsigned long objectCount = 0;
volatile unsigned long lastEdgeMs  = 0;
const unsigned long debounceMs     = 80;

unsigned long lastPublish = 0;
const unsigned long publishInterval = 1000;

void IRAM_ATTR objISR() {
  unsigned long now = millis();
  if (now - lastEdgeMs > debounceMs) {
    objectCount++;
    lastEdgeMs = now;
  }
}

void callback(char* topic, byte* message, unsigned int length) {
  String msg;
  for (unsigned int i = 0; i < length; i++) msg += (char)message[i];
  Serial.print("MQTT msg received: "); Serial.println(msg);

  if (msg.indexOf("expand hive") >= 0) {
    Serial.println("Expand Hive command received!");
  } else if (msg.indexOf("reset") >= 0) {
    Serial.println("Reset command received â†’ Counter reset.");
    noInterrupts();
    objectCount = 0;
    interrupts();
  }
}

void setupWiFi() {
  Serial.print("Connecting to "); Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print("."); }
  Serial.println("\nWiFi connected");
  Serial.print("IP: "); Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("MQTT connecting...");
    if (client.connect("ESP32_Hive_Client")) {
      Serial.println(" connected");
      client.subscribe(topic_pub);
    } else {
      Serial.print(" failed, rc="); Serial.print(client.state());
      Serial.println(" retry in 2s");
      delay(2000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(OBJ_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(OBJ_PIN), objISR, FALLING);

  sensors.begin();
  setupWiFi();

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  Serial.println("Setup complete.");
}

void loop() {
  if (!client.connected()) reconnect();
  client.loop();

  unsigned long now = millis();
  if (now - lastPublish >= publishInterval) {
    lastPublish = now;
    sensors.requestTemperatures();
    float tempC = sensors.getTempCByIndex(0);

    noInterrupts();
    unsigned long countSnapshot = objectCount;
    interrupts();

    String msg = "";
    if (countSnapshot > 10) {
      msg = "Expand Hive";
    }

    String payload = "{";
    payload += "\"temperature\": " + String(isnan(tempC) ? 0.0 : tempC, 2) + ",";
    payload += "\"count\": " + String(countSnapshot) + ",";
    payload += "\"message\": \"" + msg + "\"";
    payload += "}";

    client.publish(topic_pub, payload.c_str());
    Serial.print("Published: "); Serial.println(payload);
  }
}
